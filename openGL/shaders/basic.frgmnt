#version 330 core

in vec3 normal;
in vec3 vertexPos;
in vec2 texCoord;
flat in int materialI;

uniform vec3 lightSource;
//uniform sampler2D texture0;
//uniform sampler2D texture1;
uniform sampler2D maps[16];

struct Material {
    vec3 diffuseColor;
    vec3 specularColor;

    int diffuseMapI;
    int specularMapI;

    float shininess;
};

uniform Material materials[16];

out vec4 FragColor;

void main()
{
    Material material = materials[materialI];
    vec3 diffuseColor;
    if (material.diffuseMapI == -1) {
        diffuseColor = material.diffuseColor;
    } else {
        switch (material.diffuseMapI) {
        case 0:
            diffuseColor = texture(maps[0], texCoord).xyz;
            break;
        case 1:
            diffuseColor = texture(maps[1], texCoord).xyz;
            break;
        case 2:
            diffuseColor = texture(maps[2], texCoord).xyz;
            break;
        case 3:
            diffuseColor = texture(maps[3], texCoord).xyz;
            break;
        case 4:
            diffuseColor = texture(maps[4], texCoord).xyz;
            break;
        case 5:
            diffuseColor = texture(maps[5], texCoord).xyz;
            break;
        case 6:
            diffuseColor = texture(maps[6], texCoord).xyz;
            break;
        case 7:
            diffuseColor = texture(maps[7], texCoord).xyz;
            break;
        }
    }
    vec3 objectColor;
    switch (materialI) {
    case 0:
        objectColor = vec3(0.0, 0.0, 0.0);
        break;
    case 1:
        objectColor = vec3(0.5, 0.0, 0.0);
        break;
    case 2:
        objectColor = vec3(1.0, 0.0, 0.0);
        break;
    case 3:
        objectColor = vec3(0.0, 0.5, 0.0);
        break;
    case 4:
        objectColor = vec3(0.0, 1.0, 0.0);
        break;
    case 5:
        objectColor = vec3(0.0, 0.0, 0.5);
        break;
    case 6:
        objectColor = vec3(0.0, 0.0, 1.0);
        break;
    default:
        objectColor = vec3(0.5, 0.5, 0.5);
        break;
    }
    if (material.diffuseMapI == -1)
        objectColor = vec3(1, 0, 0);
    else
        objectColor = vec3(0, 1, 0);
    objectColor = diffuseColor;

	float ambientStrength = 0.2;
	float specularStrength = 0.8;

	vec3 lightColor = vec3(1.0);//specularColor;
    //vec3 objectColor = diffuseColor;

	vec3 norm = normalize(normal);
	vec3 dir = normalize(lightSource - vertexPos);
	float diff = max(dot(norm, dir), 0.0);

	vec3 diffuse = diff * lightColor;
	vec3 ambient = (ambientStrength * lightColor);

	vec3 reflectDir = reflect(-dir, norm);
	float spec = pow(max(dot(normalize(-vertexPos), reflectDir), 0.0), 32);
	vec3 specular = specularStrength * spec * lightColor;

	vec3 result = (ambient + diffuse + specular) * objectColor;
	FragColor = vec4(result, 1.0);
    //FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}
