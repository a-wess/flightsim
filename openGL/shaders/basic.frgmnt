#version 330 core

in vec3 normal;
in vec3 vertexPos;
in vec2 texCoord;

uniform vec3 lightSource;
uniform sampler2D texture0;

uniform vec3 diffuseColor;
uniform bool useTexture;

uniform float shininess;
uniform float alpha;

out vec4 FragColor;

void main()
{
    vec3 objectColor;
    if (useTexture)
        objectColor = texture(texture0, texCoord).xyz;
    else
        objectColor = diffuseColor;

	float ambientStrength = 0.2;
	float specularStrength = 0.8;

	vec3 lightColor = vec3(1.0);

	vec3 norm = normalize(normal);
	vec3 dir = normalize(lightSource - vertexPos);
	float diff = max(dot(norm, dir), 0.0);

	vec3 diffuse = diff * lightColor;
	vec3 ambient = (ambientStrength * lightColor);

	vec3 reflectDir = reflect(-dir, norm);
	float spec = pow(max(dot(normalize(-vertexPos), reflectDir), 0.0), shininess);
	vec3 specular = specularStrength * spec * lightColor;

	vec3 result = (ambient + diffuse + specular) * objectColor;
	FragColor = vec4(result, alpha);
    //FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}
