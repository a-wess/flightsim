#version 420 core

uniform sampler2D 	textures[4];
uniform sampler2D 	splatmap;
uniform sampler2D 	lightmap;
uniform sampler2D 	heightmap;
uniform vec3 	  	sun;

in vec2 			UV;
in vec3 			Pos;
in float 			fogAmount;
in float 			sunAmount;

out vec4 			FragColor;

//link: https://www.shadertoy.com/view/4djSRW
#define HASHSCALE4 vec4(443.897, 441.423, 437.195, 444.129)

vec4 hash4(vec2 p)
{
	vec4 p4 = fract(vec4(p.xyxy) * HASHSCALE4);
    p4 += dot(p4, p4.wzxy+19.19);
    return fract((p4.xxyz+p4.yzzw)*p4.zywx);
}

vec4 textureNoTile( sampler2D samp, in vec2 uv )
{
    ivec2 iuv = ivec2( floor( uv ) );
     vec2 fuv = fract( uv );

    // generate per-tile transform
    vec4 ofa = hash4( iuv + ivec2(0,0) );
    vec4 ofb = hash4( iuv + ivec2(1,0) );
    vec4 ofc = hash4( iuv + ivec2(0,1) );
    vec4 ofd = hash4( iuv + ivec2(1,1) );
    
    vec2 ddx = dFdx( uv );
    vec2 ddy = dFdy( uv );

    // transform per-tile uvs
    ofa.zw = sign( ofa.zw-0.5 );
    ofb.zw = sign( ofb.zw-0.5 );
    ofc.zw = sign( ofc.zw-0.5 );
    ofd.zw = sign( ofd.zw-0.5 );
    
    // uv's, and derivatives (for correct mipmapping)
    vec2 uva = uv*ofa.zw + ofa.xy, ddxa = ddx*ofa.zw, ddya = ddy*ofa.zw;
    vec2 uvb = uv*ofb.zw + ofb.xy, ddxb = ddx*ofb.zw, ddyb = ddy*ofb.zw;
    vec2 uvc = uv*ofc.zw + ofc.xy, ddxc = ddx*ofc.zw, ddyc = ddy*ofc.zw;
    vec2 uvd = uv*ofd.zw + ofd.xy, ddxd = ddx*ofd.zw, ddyd = ddy*ofd.zw;
        
    // fetch and blend
    vec2 b = smoothstep( 0.25,0.75, fuv );
    
    return mix( mix( textureGrad( samp, uva, ddxa, ddya ), 
                     textureGrad( samp, uvb, ddxb, ddyb ), b.x ), 
                mix( textureGrad( samp, uvc, ddxc, ddyc ),
                     textureGrad( samp, uvd, ddxd, ddyd ), b.x), b.y );
}


void main()
{
	vec2 tex = vec2(Pos.x/2048.0 + 0.5, Pos.z/2048.0 + 0.5);
	vec4 alpha = texture(splatmap, tex);
    vec3 normal = texture(lightmap, tex).rgb;
	vec3 lightDir = normalize(sun);
	float diff = max(dot(normal, lightDir), 0.0f);
	vec4 t1 = textureNoTile(textures[0], UV); //texture(textures[0], UVU.xy);
	vec4 t2 = textureNoTile(textures[1], UV); //texture(textures[1], UVU.xy);
	vec4 t3 = textureNoTile(textures[2], UV); //texture(textures[2], UVU.xy);
	vec4 t4 = textureNoTile(textures[3], UV); //texture(textures[3], UVU.xy);
	FragColor = t1 * alpha.r + t2 * alpha.g + t3 * alpha.b + t4 * alpha.a;
	FragColor = diff * FragColor;

	vec4 fogColor = vec4(0.51, 0.473, 0.463, 1.0);
	FragColor = mix(FragColor, fogColor, fogAmount);
}
