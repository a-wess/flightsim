#version 420 core

layout (vertices = 4) out;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

const vec2 screenSize = vec2(800, 600);
const float maxTessLevel = 64.0;
const float maxDistance = 2000;
const float lod_factor = 1;

vec4 camera = inverse(view) * vec4(0.0, 0.0, 0.0, 1.0);

float calcTessLevel(vec4 v0, vec4 v1) {
	
	float d_mean = (distance(vec3(model * v0), vec3(camera)) + distance(vec3(model * v1), vec3(camera)))/2.0;
	const float s = max(0.1, 1.0 - d_mean/maxDistance);
	//return 1;
	return s * maxTessLevel;
}

void main()
{
	#define id gl_InvocationID
	gl_out[id].gl_Position = gl_in[id].gl_Position;
	if (id == 0) {
		float e0 = calcTessLevel(gl_in[0].gl_Position, gl_in[1].gl_Position);
		float e1 = calcTessLevel(gl_in[1].gl_Position, gl_in[2].gl_Position);
		float e2 = calcTessLevel(gl_in[2].gl_Position, gl_in[3].gl_Position);
		float e3 = calcTessLevel(gl_in[3].gl_Position, gl_in[0].gl_Position);

		gl_TessLevelOuter[0] = e0;
		gl_TessLevelOuter[1] = e1;
		gl_TessLevelOuter[2] = e2;
		gl_TessLevelOuter[3] = e3;
		gl_TessLevelInner[0] = (e0+e1+e3+e2)/4;
		gl_TessLevelInner[1] = (e0+e1+e3+e2)/4;
	}
}