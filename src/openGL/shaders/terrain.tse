#version 420 core
layout (quads, fractional_even_spacing, ccw) in;

uniform float terrain_size;
uniform vec3 terrain_origin;
uniform vec2 tex_coord_offset;

uniform mat4 		model;
uniform mat4 		view;
uniform mat4 		projection;
uniform sampler2D 	heightmap;


out vec3 world_pos;
out vec2 tex_coord;

out vec2 UV;


//noise from https://www.shadertoy.com/view/XdXGW8
vec2 hash( vec2 x )  // replace this by something better
{
    const vec2 k = vec2( 0.3183099, 0.3678794 );
    x = x*k + k.yx;
    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );
}

float gradient_noise( in vec2 p )
{
    vec2 i = floor( p );
    vec2 f = fract( p );
	
	vec2 u = f*f*(3.0-2.0*f);

    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), 
                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),
                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), 
                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);
}

float height(in vec2 p) {
    return mix(texture(heightmap, p).r,
               0.5+0.5*gradient_noise(terrain_size*0.05*p), 
               0.01);
}




void main() {
	vec4 p1 = mix(gl_in[1].gl_Position, gl_in[0].gl_Position,gl_TessCoord.x);
	vec4 p2 = mix(gl_in[2].gl_Position, gl_in[3].gl_Position,gl_TessCoord.x);
	gl_Position = mix(p1, p2, gl_TessCoord.y);

	vec4 tex = model * gl_Position;
	tex_coord = (tex.xz - terrain_origin.xz) / terrain_size + tex_coord_offset + 0.5;


    gl_Position.y = height(tex_coord) * 1480 - 900;
	gl_Position = model * gl_Position;
	world_pos = gl_Position.xyz;
	gl_Position = projection * view * gl_Position;
	
	float width = model[0][0];
	float height = model[3][3];
	//TODO: incorporate tex_coord_offset
	UV = gl_TessCoord.xy * max(width/4.0f, 1.0f);
}
